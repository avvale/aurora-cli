/* eslint-disable @typescript-eslint/no-unused-vars */
{{
    setVar 'importsArray' (
        array
            (object items=(array 'Test' 'TestingModule') path='@nestjs/testing')
            (
                object
                    items=
                    (
                        array
                            (sumStrings (getClassNameAdditionalApi currentAdditionalApi) 'Resolver')
                            (sumStrings (getClassNameAdditionalApi currentAdditionalApi) 'Handler')
                    )
                    path=(sumStrings config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName))
            )
    )
~}}
{{#if (hasI18nProperties schema.aggregateProperties) }}
{{
    push importsArray
        (object items='CacheModule' path='@nestjs/cache-manager')
~}}
{{/if}}
{{{ importManager (object imports=importsArray) }}}
describe('{{ getClassNameAdditionalApi currentAdditionalApi }}Resolver', () =>
{
    let resolver: {{ getClassNameAdditionalApi currentAdditionalApi }}Resolver;
    let handler: {{ getClassNameAdditionalApi currentAdditionalApi }}Handler;

    beforeAll(async () =>
    {
        const module: TestingModule = await Test.createTestingModule({
            imports: [
                {{#if (hasI18nProperties schema.aggregateProperties) }}
                CacheModule.register(),
                {{/if}}
            ],
            providers: [
                {{ getClassNameAdditionalApi currentAdditionalApi }}Resolver,
                {
                    provide : {{ getClassNameAdditionalApi currentAdditionalApi }}Handler,
                    useValue: {
                        main: () => { /**/ },
                    },
                },
            ],
        })
            .compile();

        resolver = module.get<{{ getClassNameAdditionalApi currentAdditionalApi }}Resolver>({{ getClassNameAdditionalApi currentAdditionalApi }}Resolver);
        handler = module.get<{{ getClassNameAdditionalApi currentAdditionalApi }}Handler>({{ getClassNameAdditionalApi currentAdditionalApi }}Handler);
    });

    test('{{ getClassNameAdditionalApi currentAdditionalApi }}Resolver should be defined', () =>
    {
        expect(resolver).toBeDefined();
    });

    describe('main', () =>
    {
        test('{{ getClassNameAdditionalApi currentAdditionalApi }}Resolver should be defined', () =>
        {
            expect(resolver).toBeDefined();
        });
    });
});