
type OAuthScope
{
    id: ID!
    code: GraphQLString!
    name: GraphQLString!
    roleIds: [ID]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input OAuthCreateScopeInput
{
    id: ID!
    code: GraphQLString!
    name: GraphQLString!
    roleIds: [ID]
}

input OAuthUpdateScopeByIdInput
{
    id: ID!
    code: GraphQLString
    name: GraphQLString
    roleIds: [ID]
}

input OAuthUpdateScopesInput
{
    id: ID
    code: GraphQLString
    name: GraphQLString
    roleIds: [ID]
}

type Query
{
    oAuthFindScope(
        query: QueryStatement
        constraint: QueryStatement
    ): OAuthScope

    oAuthFindScopeById(
        id: ID
        constraint: QueryStatement
    ): OAuthScope

    oAuthGetScopes(
        query: QueryStatement
        constraint: QueryStatement
    ): [OAuthScope]!

    oAuthPaginateScopes(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    oAuthCreateScope(
        payload: OAuthCreateScopeInput!
    ): OAuthScope

    oAuthCreateScopes(
        payload: [OAuthCreateScopeInput]!
    ): Boolean!

    oAuthUpdateScopeById(
        payload: OAuthUpdateScopeByIdInput!
        constraint: QueryStatement
    ): OAuthScope

    oAuthUpdateScopes(
        payload: OAuthUpdateScopesInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [OAuthScope]!

    oAuthUpsertScope(
        payload: OAuthUpdateScopeByIdInput!
    ): OAuthScope

    oAuthDeleteScopeById(
        id: ID!
        constraint: QueryStatement
    ): OAuthScope

    oAuthDeleteScopes(
        query: QueryStatement
        constraint: QueryStatement
    ): [OAuthScope]!

}
