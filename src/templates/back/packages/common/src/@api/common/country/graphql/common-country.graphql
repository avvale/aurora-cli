enum CommonCountryMapType {
    ROADMAP
    SATELLITE
    HYBRID
    TERRAIN
}

enum CommonAdministrativeArea {
    ADMINISTRATIVE_AREA_LEVEL_1
    ADMINISTRATIVE_AREA_LEVEL_2
    ADMINISTRATIVE_AREA_LEVEL_3
}

type CommonAdministrativeAreasCountry
{
    commonCountry: CommonCountry
    commonGetAdministrativeAreasLevel1: [CommonAdministrativeAreaLevel1]
    commonGetAdministrativeAreasLevel2: [CommonAdministrativeAreaLevel2]
    commonGetAdministrativeAreasLevel3: [CommonAdministrativeAreaLevel3]
}

type CommonCountry
{
    id: ID!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    mapType: CommonCountryMapType!
    availableLangs: JSON
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    langId: ID!
    lang: CommonLang
    name: GraphQLString!
    slug: GraphQLString!
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

input CommonCreateCountryInput
{
    id: ID!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    mapType: CommonCountryMapType!
    availableLangs: JSON
    langId: ID!
    name: GraphQLString!
    slug: GraphQLString!
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

input CommonUpdateCountryByIdInput
{
    id: ID!
    iso3166Alpha2: GraphQLString
    iso3166Alpha3: GraphQLString
    iso3166Numeric: GraphQLString
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    mapType: CommonCountryMapType
    availableLangs: JSON
    langId: ID
    name: GraphQLString
    slug: GraphQLString
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

input CommonUpdateCountriesInput
{
    id: ID
    iso3166Alpha2: GraphQLString
    iso3166Alpha3: GraphQLString
    iso3166Numeric: GraphQLString
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    mapType: CommonCountryMapType
    availableLangs: JSON
    langId: ID
    name: GraphQLString
    slug: GraphQLString
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

type Query
{
    commonFindCountry(
        query: QueryStatement
        constraint: QueryStatement
    ): CommonCountry

    commonFindCountryById(
        id: ID
        constraint: QueryStatement
    ): CommonCountry

    commonGetCountries(
        query: QueryStatement
        constraint: QueryStatement
    ): [CommonCountry]!

    commonPaginateCountries(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!


    # additionalApis
    commonAdministrativeAreasCountry(
        countryId: GraphQLString!
        administrativeAreaLevel1Id: GraphQLString
        administrativeAreaLevel2Id: GraphQLString
    ): CommonAdministrativeAreasCountry
}

type Mutation
{
    commonCreateCountry(
        payload: CommonCreateCountryInput!
    ): CommonCountry

    commonCreateCountries(
        payload: [CommonCreateCountryInput]!
    ): Boolean!

    commonUpdateCountryById(
        payload: CommonUpdateCountryByIdInput!
        constraint: QueryStatement
    ): CommonCountry

    commonUpdateCountries(
        payload: CommonUpdateCountriesInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [CommonCountry]!

    commonUpsertCountry(
        payload: CommonUpdateCountryByIdInput!
    ): CommonCountry

    commonDeleteCountryById(
        id: ID!
        constraint: QueryStatement
    ): CommonCountry

    commonDeleteCountries(
        query: QueryStatement
        constraint: QueryStatement
    ): [CommonCountry]!

}
