
type IamBoundedContext
{
    """UUID for bounded context"""
    id: ID!
    """Name of the bounded context"""
    name: GraphQLString!
    """root folder where the bounded context is located"""
    root: GraphQLString!
    """Sort order of the bounded context"""
    sort: GraphQLInt
    """Indicates if the bounded context is active"""
    isActive: GraphQLBoolean!
    """List of permissions associated with the bounded context"""
    permissions: [IamPermission]
    """Timestamp when the bounded context was created"""
    createdAt: GraphQLTimestamp
    """Timestamp when the bounded context was last updated"""
    updatedAt: GraphQLTimestamp
    """Timestamp when the bounded context was deleted"""
    deletedAt: GraphQLTimestamp
}

input IamCreateBoundedContextInput
{
    id: ID!
    name: GraphQLString!
    root: GraphQLString!
    sort: GraphQLInt
    isActive: GraphQLBoolean!
}

input IamUpdateBoundedContextByIdInput
{
    id: ID!
    name: GraphQLString
    root: GraphQLString
    sort: GraphQLInt
    isActive: GraphQLBoolean
}

input IamUpdateBoundedContextsInput
{
    id: ID
    name: GraphQLString
    root: GraphQLString
    sort: GraphQLInt
    isActive: GraphQLBoolean
}

type Query
{
    iamFindBoundedContext(
        query: QueryStatement
        constraint: QueryStatement
    ): IamBoundedContext

    iamFindBoundedContextById(
        id: ID
        constraint: QueryStatement
    ): IamBoundedContext

    iamGetBoundedContexts(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamBoundedContext]!

    iamPaginateBoundedContexts(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    iamCreateBoundedContext(
        payload: IamCreateBoundedContextInput!
    ): IamBoundedContext

    iamCreateBoundedContexts(
        payload: [IamCreateBoundedContextInput]!
    ): Boolean!

    iamUpdateBoundedContextById(
        payload: IamUpdateBoundedContextByIdInput!
        constraint: QueryStatement
    ): IamBoundedContext

    iamUpdateBoundedContexts(
        payload: IamUpdateBoundedContextsInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [IamBoundedContext]!

    iamDeleteBoundedContextById(
        id: ID!
        constraint: QueryStatement
    ): IamBoundedContext

    iamDeleteBoundedContexts(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamBoundedContext]!

}
