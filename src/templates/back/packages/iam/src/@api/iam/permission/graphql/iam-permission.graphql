
type IamPermission
{
    """UUID for permission"""
    id: ID!
    """Permission name, this name is unique and used to evaluate if a user can consume or access a resource"""
    name: GraphQLString!
    """UUID for bounded context, a permission is associated with a bounded context"""
    boundedContextId: ID!
    """Bounded context object relationship to permission"""
    boundedContext: IamBoundedContext
    """List of roles associated with the permission"""
    roles: [IamRole]
    """Timestamp when the permission was created"""
    createdAt: GraphQLTimestamp
    """Timestamp when the permission was last updated"""
    updatedAt: GraphQLTimestamp
    """Timestamp when the permission was deleted"""
    deletedAt: GraphQLTimestamp
}

input IamCreatePermissionInput
{
    id: ID!
    name: GraphQLString!
    boundedContextId: ID!
    roleIds: [ID]
}

input IamUpdatePermissionByIdInput
{
    id: ID!
    name: GraphQLString
    boundedContextId: ID
    roleIds: [ID]
}

input IamUpdatePermissionsInput
{
    id: ID
    name: GraphQLString
    boundedContextId: ID
    roleIds: [ID]
}

type Query
{
    iamFindPermission(
        query: QueryStatement
        constraint: QueryStatement
    ): IamPermission

    iamFindPermissionById(
        id: ID
        constraint: QueryStatement
    ): IamPermission

    iamGetPermissions(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamPermission]!

    iamPaginatePermissions(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    iamCreatePermission(
        payload: IamCreatePermissionInput!
    ): IamPermission

    iamCreatePermissions(
        payload: [IamCreatePermissionInput]!
    ): Boolean!

    iamUpdatePermissionById(
        payload: IamUpdatePermissionByIdInput!
        constraint: QueryStatement
    ): IamPermission

    iamUpdatePermissions(
        payload: IamUpdatePermissionsInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [IamPermission]!

    iamUpsertPermission(
        payload: IamUpdatePermissionByIdInput!
    ): IamPermission

    iamDeletePermissionById(
        id: ID!
        constraint: QueryStatement
    ): IamPermission

    iamDeletePermissions(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamPermission]!

}
