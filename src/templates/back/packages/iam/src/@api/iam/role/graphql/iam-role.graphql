
type IamRole
{
    id: ID!
    name: GraphQLString!
    isMaster: GraphQLBoolean!
    permissions: [IamPermission]
    accounts: [IamAccount]
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input IamCreateRoleInput
{
    id: ID!
    name: GraphQLString!
    isMaster: GraphQLBoolean!
    permissionIds: [ID]
    accountIds: [ID]
}

input IamUpdateRoleByIdInput
{
    id: ID!
    name: GraphQLString
    isMaster: GraphQLBoolean
    permissionIds: [ID]
    accountIds: [ID]
}

input IamUpdateRolesInput
{
    id: ID
    name: GraphQLString
    isMaster: GraphQLBoolean
    permissionIds: [ID]
    accountIds: [ID]
}

input IamInheritRoleInput
{
    parentRoleId: ID!
    childRoleId: ID!
}

type Query
{
    iamFindRole(
        query: QueryStatement
        constraint: QueryStatement
    ): IamRole

    iamFindRoleById(
        id: ID
        constraint: QueryStatement
    ): IamRole

    iamGetRoles(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamRole]!

    iamPaginateRoles(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    iamCreateRole(
        payload: IamCreateRoleInput!
    ): IamRole

    iamCreateRoles(
        payload: [IamCreateRoleInput]!
    ): Boolean!

    iamUpdateRoleById(
        payload: IamUpdateRoleByIdInput!
        constraint: QueryStatement
    ): IamRole

    iamUpdateRoles(
        payload: IamUpdateRolesInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [IamRole]!

    iamUpsertRole(
        payload: IamUpdateRoleByIdInput!
    ): IamRole

    iamDeleteRoleById(
        id: ID!
        constraint: QueryStatement
    ): IamRole

    iamDeleteRoles(
        query: QueryStatement
        constraint: QueryStatement
    ): [IamRole]!


    # additionalApis
    iamInheritPermissionsRoleRole(
        payload: IamInheritRoleInput!
    ): Boolean!

}
