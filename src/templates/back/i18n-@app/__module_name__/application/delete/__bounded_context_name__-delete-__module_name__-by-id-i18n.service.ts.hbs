{{
    setVar 'importsArray' (
        array
            (object items=(array 'Injectable') path='@nestjs/common')
            (object items=(array 'EventPublisher') path='@nestjs/cqrs')
            (object items=(array 'CQMetadata' 'Querystatement') path=config.auroraCorePackage)
            (object items=(ternary (hasI18nProperties schema.aggregateProperties) (sumStrings (toPascalCase schema.boundedContextName) (toPascalCase schema.modelName) 'AvailableLangs') (sumStrings (toPascalCase schema.boundedContextName) (toPascalCase schema.modelName) 'Id') ) path='../../domain/value-objects')
            (object
                items=(
                    array
                        schema.aggregateName
                        (sumStrings schema.aggregateName 'I18nModel')
                        (sumStrings (toPascalCase schema.boundedContextName) 'I' (toPascalCase schema.moduleName) 'I18nRepository')
                        (sumStrings schema.aggregateName 'Mapper')
                )
                path=(
                    sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName)
                )
            )
    )
~}}
{{#each (getValueObjectsProperties schema.aggregateProperties) }}
{{#if (isAllowProperty ../schema.moduleName this) }}
{{
    push ../importsArray
        (
            object
                items=(sumStrings ../schema.aggregateName (addI18nPropertySignature this) (toPascalCase (getPropertyName this)))
                path=(sumStrings ../config.appContainer '/' (toKebabCase ../schema.boundedContextName) '/' (toKebabCase ../schema.moduleName) '/domain/value-objects')
                oneRowByItem=true
        )
~}}
{{/if}}
{{/each}}
{{{ importManager (object imports=importsArray) }}}
@Injectable()
export class {{ toPascalCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ByIdI18nService
{
    constructor(
        private readonly publisher: EventPublisher,
        private readonly repository: {{ toPascalCase schema.boundedContextName }}I{{ toPascalCase schema.moduleName }}Repository,
        {{> declareI18nRepository}}
    ) {}

    async main(
        id: {{ toPascalCase schema.boundedContextName }}{{ toPascalCase schema.moduleName }}Id,
        constraint?: QueryStatement,
        cQMetadata?: CQMetadata,
    ): Promise<void>
    {
        // get object to delete
        const {{ toCamelCase schema.moduleName }} = await this.repository
            .findById(
                id,
                {
                    constraint,
                    cQMetadata,
                },
            );

        // it is not necessary to pass the constraint in the delete, if the object
        // is not found in the findById, an exception will be thrown.
        await this.repositoryI18n
            .delete({
                queryStatement: {
                    where: {
                        langId: {{ toCamelCase schema.moduleName }}.langId.value,
                        {{ toCamelCase schema.moduleName }}Id: {{ toCamelCase schema.moduleName }}.id.value,
                    },
                },
            });

        const availableLangs = {{ toCamelCase schema.moduleName }}.availableLangs.value.removeItem({{ toCamelCase schema.moduleName }}.langId.value);

        // if has not any translation in i18n table, delete record
        if (availableLangs.length === 0)
        {
            await this.repository
                .deleteById(
                    {{ toCamelCase schema.moduleName }}.id,
                    {
                        cQMetadata,
                    },
                );
        }
        else
        {
            {{ toCamelCase schema.moduleName }}.availableLangs = new {{ toPascalCase schema.boundedContextName }}{{ toPascalCase schema.moduleName }}AvailableLangs(availableLangs);
            await this.repository.update({{ toCamelCase schema.moduleName }});
        }

        // insert EventBus in object, to be able to apply and commit events
        const {{ toCamelCase schema.moduleName }}Register = this.publisher.mergeObjectContext({{ toCamelCase schema.moduleName }});

        {{ toCamelCase schema.moduleName }}Register.deleted({{ toCamelCase schema.moduleName }}); // apply event to model events
        {{ toCamelCase schema.moduleName }}Register.commit(); // commit all events of model
    }
}