{{
    setVar 'importsArray' (
        array
            (object items=(array 'Injectable') path='@nestjs/common')
            (object items=(array 'ICommandBus' 'IQueryBus' 'QueryStatement'  'Utils') path=config.auroraCorePackage)
            (object items=(array schema.aggregateName (sumStrings (toPascalCase schema.boundedContextName) 'Update' (toPascalCase schema.moduleName) 'ByIdInput')) path='@api/graphql')
            (
                object
                    items=
                    (
                        array
                            (sumStrings schema.aggregateName 'Dto')
                            (sumStrings (toPascalCase schema.boundedContextName) 'Update' (toPascalCase schema.moduleName) 'ByIdDto')
                    )
                    path=(sumStrings config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName))
            )
            (
                object
                    items=
                    (
                        array
                            (sumStrings (toPascalCase schema.boundedContextName) 'Find' (toPascalCase schema.moduleName) 'ByIdQuery')
                            (sumStrings (toPascalCase schema.boundedContextName) 'Update' (toPascalCase schema.moduleName) 'ByIdCommand')
                    )
                    path=(sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName))
            )
    )
~}}
{{#if (hasI18nProperties schema.aggregateProperties) }}
{{
    push importsArray
        (object items=(array 'BadRequestException') path='@nestjs/common')
        (object items=(array 'CoreAddI18nConstraintService' 'CoreGetSearchKeyLangService' 'CoreGetContentLanguageObjectService') path=config.auroraCorePackage)
~}}
{{/if}}
{{#if schema.hasAuditing}}
{{
    push importsArray
        (object items=(array 'AuditingMeta') path=config.auroraCorePackage)
~}}
{{/if}}
{{#if schema.hasTenant}}
{{
    push importsArray
        (object items='IamAccountResponse' path=(sumStrings config.appContainer '/iam/account'))
~}}
{{/if}}
{{{ importManager (object imports=importsArray) }}}
@Injectable()
export class {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdHandler
{
    constructor(
        private readonly commandBus: ICommandBus,
        private readonly queryBus: IQueryBus,
        {{#if (hasI18nProperties schema.aggregateProperties) }}
        private readonly coreAddI18nConstraintService: CoreAddI18nConstraintService,
        private readonly coreGetContentLanguageObjectService: CoreGetContentLanguageObjectService,
        private readonly coreGetSearchKeyLangService: CoreGetSearchKeyLangService,
        {{/if}}
    ) {}

    async main(
        payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput | {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdDto,
        {{#if schema.hasTenant}}
        account: AccountResponse,
        {{/if}}
        constraint?: QueryStatement,
        timezone?: string,
        {{#if (hasI18nProperties schema.aggregateProperties) }}
        contentLanguage?: string,
        {{/if}}
        {{#if schema.hasAuditing}}
        auditing?: AuditingMeta,
        {{/if}}
    ): Promise<{{ toPascalCase schema.boundedContextName }}{{ toPascalCase schema.moduleName }} | {{ toPascalCase schema.boundedContextName }}{{ toPascalCase schema.moduleName }}Dto>
    {
        {{#if (hasI18nProperties schema.aggregateProperties) }}
        if (!contentLanguage) throw new BadRequestException('To update a multi-language object, the content-language header must be defined.');

        const constraintToFindById = await this.coreAddI18nConstraintService.add(
            {},
            '{{ toCamelCase schema.moduleName }}I18n',
            contentLanguage,
            {
                searchKeyLang: this.coreGetSearchKeyLangService.get(),
            },
        );

        {{/if}}
        const {{ toCamelCase schema.moduleName }} = await this.queryBus.ask(new {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ByIdQuery(
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            payload.{{ toCamelCase (getPropertyName this) }},
            {{/each}}
            {{#if (hasI18nProperties schema.aggregateProperties) }}
            constraintToFindById,
            {{else}}
            constraint,
            {{/if}}
            {
                timezone,
            },
        ));

        const dataToUpdate = Utils.diff(payload, {{ toCamelCase schema.moduleName }});

        {{#if (hasI18nProperties schema.aggregateProperties) }}
        const contentLanguageObject = await this.coreGetContentLanguageObjectService.get(contentLanguage);

        {{/if}}
        await this.commandBus.dispatch(new {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdCommand(
            {
                ...dataToUpdate,
                {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
                {{ toCamelCase (getPropertyName this) }}: payload.{{ toCamelCase (getPropertyName this) }},
                {{/each}}
                {{#if (hasI18nProperties schema.aggregateProperties) }}
                langId: contentLanguageObject.id,
                {{/if}}
            },
            constraint,
            {
                timezone,
                {{#if schema.hasAuditing}}
                repositoryOptions: {
                    auditing,
                },
                {{/if}}
                {{#if (hasI18nProperties schema.aggregateProperties) }}
                meta: {
                    contentLanguage: contentLanguageObject,
                },
                {{/if}}
            },
        ));

        return await this.queryBus.ask(new {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ByIdQuery(
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            payload.{{ toCamelCase (getPropertyName this) }},
            {{/each}}
            {{#if (hasI18nProperties schema.aggregateProperties) }}
            constraintToFindById,
            {{else}}
            constraint,
            {{/if}}
            {
                timezone,
            },
        ));
    }
}
