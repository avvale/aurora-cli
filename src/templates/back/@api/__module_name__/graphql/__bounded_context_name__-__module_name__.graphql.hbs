{{#if (hasProperties schema.aggregateProperties) }}
{{#each (getEnumProperties schema.aggregateProperties) }}
enum {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }} {
    {{#each (getPropertyEnumOptions this) }}
    {{ . }}
    {{/each}}
}

{{/each}}

type {{ schema.aggregateName }}
{
{{#each (getGraphqlProperties schema.aggregateProperties) }}
{{#if (isAllowProperty ../schema.moduleName this (object allowOneToManyRelationShip=true)) }}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship.type ../relationshipType.MANY_TO_ONE}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{ toCamelCase name }}: ID{{#unless nullable }}!{{/unless}}
    {{#if relationship.description}}
    """{{ relationship.description }}"""
    {{/if}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationship.field }}: {{ relationship.aggregateName }}
{{/eq}}
{{#eq relationship.type ../relationshipType.MANY_TO_MANY}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: [{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}]{{#unless nullable }}!{{/unless}}
    {{#if relationship.isDenormalized}}
    {{ toCamelCase relationship.singularName }}Ids: [GraphQLString{{#unless nullable }}!{{/unless}}]{{#unless nullable }}!{{/unless}}
    {{/if}}
{{/eq}}
{{#eq relationship.type ../relationshipType.ONE_TO_MANY}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: [{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}]{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship.type ../relationshipType.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../propertyType.ID ~}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{ toCamelCase name }}: ID{{#unless nullable }}!{{/unless}}
    {{#if relationship.description}}"""{{ relationship.description }}"""{{/if}}
    {{ toCamelCase relationship.field }}: {{ relationship.aggregateName }}
{{else ~}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{ toCamelCase name }}: {{ relationship.aggregateName }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{/eq}}
{{#eq type ../propertyType.ENUM}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#if ../isCommonProperty}}
    {{#if description}}
    """{{ description }}"""
    {{/if}}
    {{ toCamelCase name }}: {{ getGraphqlTypeProperty this ../config }}{{#unless nullable }}!{{/unless}}
{{/if}}
{{/if}}
{{/each}}
{{! PIVOT TABLE Relationship }}
{{#each (getPrimaryKeyPropertiesFromPivotTable schema.aggregateProperties) }}
    {{ toCamelCase (getModuleNameFromPropertyRelationship modulePath) }}: {{ toPascalCase (getAggregateNameFromPropertyRelationship modulePath) }}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input
{
{{#each (getGraphqlInputProperties schema.aggregateProperties) }}
{{#if (isAllowProperty ../schema.moduleName this (object allowOneToManyRelationShip=true)) }}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship.type ../relationshipType.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: ID{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship.type ../relationshipType.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationship.singularName }}Ids: [ID]{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#eq relationship.type ../relationshipType.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship.type ../relationshipType.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../propertyType.ID ~}}
    {{ toCamelCase name }}: ID{{#unless nullable }}!{{/unless}}
{{else ~}}
    {{ toCamelCase name }}: {{ toPascalCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Create{{ toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Input{{#unless nullable }}!{{/unless}}
{{/eq}}
{{/eq}}
{{#eq type ../propertyType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}{{#unless nullable }}!{{/unless}}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase name }}: {{ getGraphqlTypeProperty this ../config }}{{#unless nullable }}!{{/unless}}
{{/if}}
{{/if}}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput
{
{{#each (getGraphqlInputProperties schema.aggregateProperties) }}
{{#if (isAllowProperty ../schema.moduleName this (object allowOneToManyRelationShip=true)) }}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship.type ../relationshipType.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: ID{{#if (isPrimaryKeyProperty this) }}!{{/if}}
{{/eq}}
{{#eq relationship.type ../relationshipType.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationship.singularName }}Ids: [ID]
{{/eq}}
{{#eq relationship.type ../relationshipType.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship.type ../relationshipType.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../propertyType.ID ~}}
    {{ toCamelCase name }}: ID
{{else ~}}
    {{ toCamelCase name }}: {{ toPascalCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Update{{ toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}ByIdInput
{{/eq}}
{{/eq}}
{{#eq type ../propertyType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase name }}: {{ getGraphqlTypeProperty this ../config }}{{#if primaryKey}}!{{/if}}
{{/if}}
{{/if}}
{{/each}}
}

input {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}Input
{
{{#each (getGraphqlInputProperties schema.aggregateProperties) }}
{{#if (isAllowProperty ../schema.moduleName this (object allowOneToManyRelationShip=true)) }}
{{setVar 'isCommonProperty' true ~}}
{{#eq relationship.type ../relationshipType.MANY_TO_ONE}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: ID
{{/eq}}
{{#eq relationship.type ../relationshipType.MANY_TO_MANY}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase relationship.singularName }}Ids: [ID]
{{/eq}}
{{#eq relationship.type ../relationshipType.ONE_TO_MANY}}{{setVar 'isCommonProperty' false ~}}{{/eq ~}}
{{#eq relationship.type ../relationshipType.ONE_TO_ONE }}
    {{setVar 'isCommonProperty' false ~}}
{{#eq type ../propertyType.ID ~}}
    {{ toCamelCase name }}: ID
{{else ~}}
    {{ toCamelCase name }}: {{ toPascalCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Update{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Input
{{/eq}}
{{/eq}}
{{#eq type ../propertyType.ENUM}}
    {{setVar 'isCommonProperty' false ~}}
    {{ toCamelCase name }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase name }}
{{/eq}}
{{#if ../isCommonProperty}}
    {{ toCamelCase name }}: {{ getGraphqlTypeProperty this ../config }}
{{/if}}
{{/if}}
{{/each}}
}
{{! end hasProperties statement }}
{{/if}}

{{#or (hasProperties schema.aggregateProperties) (hasAdditionalApiQueries schema.additionalApis) }}
type Query
{
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-find-' (toKebabCase schema.moduleName) '.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}(
        query: QueryStatement
        constraint: QueryStatement
    ): {{ schema.aggregateName }}

    {{/notInArray}}
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-find-' (toKebabCase schema.moduleName) '-by-id.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById(
        {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
        {{ toCamelCase (getPropertyName this) }}: ID
        {{/each}}
        constraint: QueryStatement
    ): {{ schema.aggregateName }}

    {{/notInArray}}
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-get-' (toKebabCase schema.moduleNames) '.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }}(
        query: QueryStatement
        constraint: QueryStatement
    ): [{{ schema.aggregateName }}]!

    {{/notInArray}}
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-paginate-' (toKebabCase schema.moduleNames) '.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }}(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

    {{/notInArray}}
    {{#if (hasAdditionalApiQueries schema.additionalApis) }}

    # additionalApis
    {{#each (getAdditionalApiQueries schema.additionalApis) }}
    {{ getResolverNameAdditionalApi this }}(
        query: QueryStatement
        constraint: QueryStatement
    ): [{{ ../schema.aggregateName }}]!

    {{/each}}
    {{/if}}
}
{{/or}}

{{#or (hasProperties schema.aggregateProperties) (hasAdditionalApiMutations schema.additionalApis) }}
type Mutation
{
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-create-' (toKebabCase schema.moduleName) '.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}(
        payload: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input!
    ): {{ schema.aggregateName }}

    {{/notInArray}}
    {{#isAllowPath schema 'createBatch' 'src' config.apiContainer (toKebabCase schema.boundedContextName) (toKebabCase schema.moduleName) 'resolvers' (sumStrings (toKebabCase schema.boundedContextName) '-create-' (toKebabCase schema.moduleNames) '.resolver.ts') }}
    {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }}(
        payload: [{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input]!
    ): Boolean!

    {{/isAllowPath}}
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-update-' (toKebabCase schema.moduleName) '-by-id.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ById(
        payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput!
        constraint: QueryStatement
    ): {{ schema.aggregateName }}

    {{/notInArray}}
    {{#isAllowPath schema 'update' 'src' config.apiContainer (toKebabCase schema.boundedContextName) (toKebabCase schema.moduleName) 'resolvers' (sumStrings (toKebabCase schema.boundedContextName) '-update-' (toKebabCase schema.moduleNames) '.resolver.ts') }}
    {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}(
        payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}Input!
        query: QueryStatement
        constraint: QueryStatement
    ): [{{ schema.aggregateName }}]!

    {{/isAllowPath}}
    {{#isAllowPath schema 'upsert' 'src' config.apiContainer (toKebabCase schema.boundedContextName) (toKebabCase schema.moduleName)  'resolvers' (sumStrings (toKebabCase schema.boundedContextName) '-upsert-' (toKebabCase schema.moduleName) '.resolver.ts') }}
    {{ toCamelCase schema.boundedContextName }}Upsert{{ toPascalCase schema.moduleName }}(
        payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput!
    ): {{ schema.aggregateName }}

    {{/isAllowPath}}
    {{#notInArray schema.excludedFiles 'src/' config.apiContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/resolvers/' (toKebabCase schema.boundedContextName) '-delete-' (toKebabCase schema.moduleName) '-by-id.resolver.ts'}}
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById(
        {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
        {{ toCamelCase (getPropertyName this) }}: ID!
        {{/each}}
        constraint: QueryStatement
    ): {{ schema.aggregateName }}

    {{/notInArray}}
    {{#isAllowPath schema 'delete' 'src' config.apiContainer (toKebabCase schema.boundedContextName) (toKebabCase schema.moduleName) 'resolvers' (sumStrings (toKebabCase schema.boundedContextName) '-delete-' (toKebabCase schema.moduleNames) '.resolver.ts') }}
    {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }}(
        query: QueryStatement
        constraint: QueryStatement
    ): [{{ schema.aggregateName }}]!

    {{/isAllowPath}}
    {{#if (hasAdditionalApiMutations schema.additionalApis) }}

    # additionalApis
    {{#each (getAdditionalApiMutations schema.additionalApis) }}
    {{ getResolverNameAdditionalApi this }}(
        payload: {{ toPascalCase ../schema.boundedContextName }}Update{{ toPascalCase ../schema.moduleName }}ByIdInput!
        constraint: QueryStatement
    ): Boolean!

    {{/each}}
    {{/if}}
}
{{/or}}
