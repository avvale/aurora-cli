{{
    setVar 'importsArray' (
        array
            (object items=(array 'Injectable') path='@nestjs/common')
            (object items=(array 'CQMetadata' 'QueryStatement') path=config.auroraCorePackage)
            (
                object
                    items=
                    (
                        array
                            schema.aggregateName
                            (sumStrings (toPascalCase schema.boundedContextName) 'I' (toPascalCase schema.moduleName) 'Repository')
                    )
                    path=(sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName))
            )
    )
~}}
{{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
{{
    push ../importsArray
        (
            object
                items=(sumStrings ../schema.aggregateName (toPascalCase (getPropertyName this)))
                path=(sumStrings ../config.appContainer '/' (toKebabCase ../schema.boundedContextName) '/' (toKebabCase ../schema.moduleName) '/domain/value-objects')
        )
~}}
{{/each}}
{{{ importManager (object imports=importsArray) }}}
@Injectable()
export class {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ByIdService
{
    constructor(
        private readonly repository: {{ toPascalCase schema.boundedContextName }}I{{ toPascalCase schema.moduleName }}Repository,
    ) {}

    async main(
        {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
        {{ toCamelCase (getPropertyName this) }}: {{ toPascalCase ../schema.boundedContextName }}{{ toPascalCase ../schema.moduleName }}{{ toPascalCase (getPropertyName this) }},
        {{/each}}
        constraint?: QueryStatement,
        cQMetadata?: CQMetadata,
    ): Promise<{{ schema.aggregateName }}>
    {
        return await this.repository.findById(
            {{#eq (length (getPrimaryKeyProperties schema.aggregateProperties)) 1 }}
            id,
            {{else}}
            undefined,
            {{/eq}}
            {
                constraint,
                cQMetadata,
                {{#gt (length (getPrimaryKeyProperties schema.aggregateProperties)) 1 }}
                findArguments: {
                    {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
                    {{ toCamelCase (getPropertyName this) }}: {{ toCamelCase (getPropertyName this) }}.value,
                    {{/each}}
                },
                {{/gt}}
            },
        );
    }
}
