{{
    setVar 'importsArray' (
        array
            (object items=(array 'Test' 'TestingModule') path='@nestjs/testing')
            (
                object
                    items=
                    (
                        array
                            (sumStrings (toPascalCase schema.boundedContextName) 'Mock' (toPascalCase schema.moduleName) 'Repository')
                            (sumStrings (toPascalCase schema.boundedContextName) 'I' (toPascalCase schema.moduleName) 'Repository')
                            (sumStrings (toPascalCase schema.boundedContextName) 'Sum' (toPascalCase schema.moduleName) 'Query')
                    )
                    path=(sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName))
            )
            (
                object
                    items=(sumStrings (toPascalCase schema.boundedContextName) 'Sum' (toPascalCase schema.moduleName) 'Service')
                    path=(sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/application/sum/' (toKebabCase schema.boundedContextName) '-sum-' (toKebabCase schema.moduleName) '.service')
            )
            (
                object
                    items=(sumStrings (toPascalCase schema.boundedContextName) 'Sum' (toPascalCase schema.moduleName) 'QueryHandler')
                    path=(sumStrings config.appContainer '/' (toKebabCase schema.boundedContextName) '/' (toKebabCase schema.moduleName) '/application/sum/' (toKebabCase schema.boundedContextName) '-sum-' (toKebabCase schema.moduleName) '.query-handler')
            )
    )
~}}
{{{ importManager (object imports=importsArray) }}}
describe('{{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler', () =>
{
    let queryHandler: {{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler;
    let service: {{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}Service;
    let repository: {{ toPascalCase schema.boundedContextName }}Mock{{ toPascalCase schema.moduleName }}Repository;

    beforeAll(async () =>
    {
        const module: TestingModule = await Test.createTestingModule({
            providers: [
                {{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler,
                {
                    provide : {{ toPascalCase schema.boundedContextName }}I{{ toPascalCase schema.moduleName }}Repository,
                    useClass: {{ toPascalCase schema.boundedContextName }}Mock{{ toPascalCase schema.moduleName }}Repository,
                },
                {
                    provide : {{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}Service,
                    useValue: {
                        main: () => { /**/ },
                    },
                },
            ],
        })
            .compile();

        queryHandler = module.get<{{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler>({{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler);
        service = module.get<{{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}Service>({{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}Service);
        repository = <{{ toPascalCase schema.boundedContextName }}Mock{{ toPascalCase schema.moduleName }}Repository>module.get<{{ toPascalCase schema.boundedContextName }}I{{ toPascalCase schema.moduleName }}Repository>({{ toPascalCase schema.boundedContextName }}I{{ toPascalCase schema.moduleName }}Repository);
    });

    describe('main', () =>
    {
        test('{{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}QueryHandler should be defined', () =>
        {
            expect(queryHandler).toBeDefined();
        });

        test('should sum inboxes', async () =>
        {
            jest.spyOn(service, 'main').mockImplementation((column: string) => new Promise(resolve => resolve(repository.sum(column))));
            expect(await queryHandler.execute(
                new {{ toPascalCase schema.boundedContextName }}Sum{{ toPascalCase schema.moduleName }}Query('id'),
            )).toStrictEqual(repository.sum('id'));
        });
    });
});
