import gql from 'graphql-tag';

export const fields = `
    {{#each (getWithoutDeletedAtProperties schema.aggregateProperties) }}
    {{~ setVar 'printProperty' true ~}}
    {{#if (isManyToManyRelationshipProperty this) }}
    {{ toCamelCase name }} {
        {{! we just add id field to get the many-to-many relationship ids }}
        id
    }
    {{~ setVar 'printProperty' false }}
    {{/if}}
    {{#and ../printProperty (isAllowProperty ../schema.moduleName this) }}
    {{#unlessEq (getPropertyName this) 'id'}}
    {{ toCamelCase (getPropertyName this) }}
    {{/unlessEq}}
    {{/and}}
    {{/each}}
`;

export const relationsFields = `
    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
    {{#eq webComponent.type 'select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} (
        query: $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
        constraint: $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
    ) {
        {{#each (getWithoutTimestampsWithoutRelationshipProperties (getPropertiesFromPropertyRelationship relationship.modulePath)) }}
        {{ getPropertyName this }}
        {{/each}}
    }
    {{/eq}}
    {{#eq webComponent.type 'multiple-select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} (
        query: $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
        constraint: $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
    ) {
        {{#each (getWithoutTimestampsWithoutRelationshipProperties (getPropertiesFromPropertyRelationship relationship.modulePath)) }}
        {{ getPropertyName this }}
        {{/each}}
    }
    {{/eq}}
    {{#eq webComponent.type 'grid-select-element'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} (
        query:$queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
        constraint:$constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
    ) {
        total
        rows
        count
    }
    {{/eq}}
    {{/each}}
`;

// default methods
export const paginationQuery = gql`
    query {{ toPascalCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }} (
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        pagination: {{ toCamelCase schema.boundedContextName }}Paginate{{ toPascalCase schema.moduleNames }} (
            query: $query
            constraint: $constraint
        ) {
            total
            rows
            count
        }
    }
`;

export const getQuery = gql`
    query {{ toPascalCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }} (
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        objects: {{ toCamelCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }} (
            query: $query
            constraint: $constraint
        ) {
            id
            #FIELDS
        }
    }
`;
{{#or
    (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
}}

export const getRelations = gql`
    query {{ toPascalCase schema.boundedContextName }}Get{{ toPascalCase schema.moduleNames }}Relations (
        {{#each (getWebComponentsProperties schema.aggregateProperties) }}
        {{#eq webComponent.type 'select'}}
        $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'multiple-select'}}
        $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'grid-select-element'}}
        $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{/each}}
    ) {
        ${relationsFields}
    }
`;
{{/or}}

export const findByIdQuery = gql`
    query {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById (
        $id: ID
        $constraint: QueryStatement
    ) {
        object: {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById (
            id: $id
            constraint: $constraint
        ) {
            id
            #FIELDS
        }
    }
`;
{{#unlessEq (countWebComponentsProperties schema.aggregateProperties) 0 }}

export const findByIdWithRelationsQuery = gql`
    query {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ByIdWithRelations (
        $id: ID
        $constraint: QueryStatement
        {{#each (getWebComponentsProperties schema.aggregateProperties) }}
        {{#eq webComponent.type 'select'}}
        $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'multiple-select'}}
        $query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'grid-select-element'}}
        $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'grid-elements-manager'}}
        $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        {{/eq}}
        {{#eq webComponent.type 'grid-select-multiple-elements'}}
        $queryPaginate{{ toPascalCase relationship.pivot.moduleNames }}: QueryStatement
        $constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }}: QueryStatement
        $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatement
        $queryGet{{ toPascalCase relationship.pivot.moduleNames }}: QueryStatement
        $constraintGet{{ toPascalCase relationship.pivot.moduleNames }}: QueryStatement
        {{/eq}}
        {{/each}}
    ) {
        object: {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }}ById (
            id: $id
            constraint: $constraint
        ) {
            id
            #FIELDS
            {{#each (getWebComponentsProperties schema.aggregateProperties) }}
            {{#eq webComponent.type 'multiple-select'}}
            {{ name }} {
                {{#each (getWithoutTimestampsWithoutRelationshipProperties (getPropertiesFromPropertyRelationship relationship.modulePath)) }}
                {{ getPropertyName this }}
                {{/each}}
            }
            {{/eq}}
            {{/each}}
        }
        {{#each (getGridElementsManagerWebComponentsProperties schema.aggregateProperties) }}
        {{ toCamelCase ../schema.boundedContextName }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} (
            query: $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
            constraint: $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
        ) {
            total
            rows
            count
        }
        {{/each}}
        {{#each (getGridSelectMultipleElementsWebComponentsProperties schema.aggregateProperties) }}
        {{ toCamelCase relationship.pivot.boundedContextName }}Paginate{{ toPascalCase relationship.pivot.moduleNames }} (
            query: $queryPaginate{{ toPascalCase relationship.pivot.moduleNames }}
            constraint: $constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }}
        ) {
            total
            rows
            count
        }
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} (
            query: $queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
            constraint: $constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}
        ) {
            total
            rows
            count
        }
        {{ toCamelCase relationship.pivot.boundedContextName }}Get{{ toPascalCase relationship.pivot.moduleNames }} (
            query: $queryGet{{ toPascalCase relationship.pivot.moduleNames }}
            constraint: $constraintGet{{ toPascalCase relationship.pivot.moduleNames }}
        ) {
            {{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Id
        }
        {{/each}}
        ${relationsFields}
    }
`;
{{/unlessEq}}

export const findQuery = gql`
    query {{ toPascalCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }} (
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        object: {{ toCamelCase schema.boundedContextName }}Find{{ toPascalCase schema.moduleName }} (
            query: $query
            constraint: $constraint
        ) {
            id
            #FIELDS
        }
    }
`;

export const createMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }} (
        $payload: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input!
    ) {
        {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }} (
            payload: $payload
        ) {
            ${fields}
        }
    }
`;

export const insertMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }} (
        $payload: [{{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}Input]!
    ) {
        {{ toCamelCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleNames }} (
            payload: $payload
        )
    }
`;

export const updateByIdMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ById (
        $payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ByIdInput!
        $constraint: QueryStatement
    ) {
        {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ById (
            payload: $payload
            constraint: $constraint
        ) {
            ${fields}
        }
    }
`;

export const updateMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }} (
        $payload: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }}Input!
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        {{ toCamelCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }} (
            payload: $payload
            query: $query
            constraint: $constraint
        ) {
            ${fields}
        }
    }
`;

export const deleteByIdMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById (
        $id: ID!
        $constraint: QueryStatement
    ) {
        {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleName }}ById (
            id: $id
            constraint: $constraint
        ) {
            ${fields}
        }
    }
`;

export const deleteMutation = gql`
    mutation {{ toPascalCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }} (
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        {{ toCamelCase schema.boundedContextName }}Delete{{ toPascalCase schema.moduleNames }} (
            query: $query
            constraint: $constraint
        ) {
            ${fields}
        }
    }
`;
{{#if (hasAdditionalApiQueries schema.additionalApis) }}
{{#each (getAdditionalApiQueries schema.additionalApis) }}

{{#if @first}}
// Queries additionalApis
{{/if}}
export const {{ getVariableNameAdditionalApi this }}Query = gql`
    query {{ getClassNameAdditionalApi this }} (
        $query: QueryStatement
        $constraint: QueryStatement
    ) {
        {{ getResolverNameAdditionalApi this }} (
            query: $query
            constraint: $constraint
        ) {
            ${fields}
        }
    }
`;
{{/each}}
{{/if}}
{{#if (hasAdditionalApiMutations schema.additionalApis) }}
{{#each (getAdditionalApiMutations schema.additionalApis) }}

{{#if @first}}
// Mutation additionalApis
{{/if}}
export const {{ getVariableNameAdditionalApi this }}Mutation = gql`
    mutation {{ getClassNameAdditionalApi this }} (
        $payload: {{ toPascalCase ../schema.boundedContextName }}Update{{ toPascalCase ../schema.moduleName }}ByIdInput!
        $constraint: QueryStatement
    ) {
        {{ getResolverNameAdditionalApi this }} (
            payload: $payload
            constraint: $constraint
        )
    }
`;
{{/each}}
{{/if}}
