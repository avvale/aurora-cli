{{
    setVar 'importsArray' (
        array
            (object items='inject' path='@angular/core')
            (object items=(array 'ActivatedRouteSnapshot' 'ResolveFn' 'RouterStateSnapshot') path='@angular/router')
            (object items=(array 'ActionService' 'GridData' 'GridFiltersStorageService' 'GridStateService' 'QueryStatementHandler') path='@aurora')
            (object items=schema.aggregateName path=(sumStrings '../' toKebabCase schema.boundedContextName '.types'))
            (object items=(sumStrings (toCamelCase schema.moduleName) 'ColumnsConfig') path=(sumStrings './' (toKebabCase schema.moduleName) '.columns-config'))
            (object items=(sumStrings (toPascalCase schema.moduleName) 'Service') path=(sumStrings './' (toKebabCase schema.moduleName) '.service'))
    )
~}}
{{#if (hasI18nProperties schema.aggregateProperties) }}
{{
    push importsArray
        (object items=(array 'CoreCurrentLangService' 'CoreLang' 'SessionService') path='@aurora')
~}}
{{/if}}
{{#each (getWebComponentsProperties schema.aggregateProperties) }}
{{#eq (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) (toKebabCase ../schema.boundedContextName) }}
{{
    push ../importsArray
        (
            object
                items=(getAggregateNameFromPropertyRelationship relationship.modulePath)
                path=(sumStrings '../' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '.types')
        )
~}}
{{else}}
{{
    push ../importsArray
        (
            object
                items=(getAggregateNameFromPropertyRelationship relationship.modulePath)
                path=(sumStrings '../../' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '.types')
        )
~}}
{{/eq}}
{{/each}}
{{! add Action import if there is no web component, when there is a web component, return observable with relations }}
{{#and
    (eq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (eq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (eq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
}}
{{
    push importsArray (object items='Action' path='@aurora')
~}}
{{/and}}
{{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}
{{#eq (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) (toKebabCase ../schema.boundedContextName) }}
{{
    push ../importsArray
        (
            object
                items=(sumStrings (toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'ColumnsConfig')
                path=(sumStrings '../' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.columns-config')
        )
        (
            object
                items=(sumStrings (toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'Service')
                path=(sumStrings '../' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.service')
        )
~}}
{{else}}
{{
    push ../importsArray
        (
            object
                items=(sumStrings (toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'ColumnsConfig')
                path=(sumStrings '../../' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.columns-config')
        )
        (
            object
                items=(sumStrings (toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'Service')
                path=(sumStrings '../../' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.service')
        )
~}}
{{/eq}}
{{/each}}
{{#each (getGridElementsManagerWebComponentsProperties schema.aggregateProperties) }}
{{#eq (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) (toKebabCase ../schema.boundedContextName) }}
{{
    push ../importsArray
        (
            object
                items=(sumStrings (toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'ColumnsConfig')
                path=(sumStrings '../' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.columns-config')
        )
~}}
{{else}}
{{
    push ../importsArray
        (
            object
                items=(sumStrings (toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'ColumnsConfig')
                path=(sumStrings '../../' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)) '.columns-config')
        )
~}}
{{/eq}}
{{/each}}
{{{ importManager (object imports=importsArray) }}}
export const {{ toCamelCase schema.moduleName }}PaginationResolver: ResolveFn<GridData<{{ schema.aggregateName }}>> = (
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot,
) =>
{
    const actionService = inject(ActionService);
    const gridFiltersStorageService = inject(GridFiltersStorageService);
    const gridStateService = inject(GridStateService);
    const {{ toCamelCase schema.moduleName }}Service = inject({{ toPascalCase schema.moduleName }}Service);
    {{#if (hasI18nProperties schema.aggregateProperties) }}
    const sessionService = inject(SessionService);
    {{/if}}

    actionService.action({
        id          : '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.list.view',
        isViewAction: true,
    });

    const gridId = '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.list.mainGridList';
    gridStateService.setPaginationActionId(gridId, '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.list.pagination');
    gridStateService.setExportActionId(gridId, '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.list.export');

    return {{ toCamelCase schema.moduleName }}Service.pagination({
        query: QueryStatementHandler
            .init({ columnsConfig: {{ toCamelCase schema.moduleName }}ColumnsConfig })
            .setColumFilters(gridFiltersStorageService.getColumnFilterState(gridId))
            .setSort(gridStateService.getSort(gridId))
            .setPage(gridStateService.getPage(gridId))
            .setSearch(gridStateService.getSearchState(gridId))
            .getQueryStatement(),
        {{#if (hasI18nProperties schema.aggregateProperties) }}
        headers: {
            'Content-Language': sessionService.get('fallbackLang')[sessionService.get('searchKeyLang')],
        },
        {{/if}}
    });
};

{{#and
    (eq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (eq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (eq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
}}
export const {{ toCamelCase schema.moduleName }}NewResolver: ResolveFn<Action{{#if (hasI18nProperties schema.aggregateProperties) }} | { object: {{ schema.aggregateName }}; }{{/if}}> = (
{{else ~}}
export const {{ toCamelCase schema.moduleName }}NewResolver: ResolveFn<{
    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
    {{#eq webComponent.type 'select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
    {{/eq}}
    {{#eq webComponent.type 'multiple-select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
    {{/eq}}
    {{#eq webComponent.type 'grid-select-element'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
    {{/eq}}
    {{/each}}
}{{#if (hasI18nProperties schema.aggregateProperties) }} | {
    object: {{ schema.aggregateName }};
    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
    {{#eq webComponent.type 'select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
    {{/eq}}
    {{#eq webComponent.type 'multiple-select'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
    {{/eq}}
    {{#eq webComponent.type 'grid-select-element'}}
    {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
    {{/eq}}
    {{/each}}
}{{/if}}> = (
{{/and}}
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot,
) =>
{
{{
    setVar 'injectionsArray' (
        array
            (object variableName='actionService' className='ActionService')
    )
~}}
{{#if (hasI18nProperties schema.aggregateProperties) }}
{{
    push injectionsArray
        (object variableName='coreCurrentLangService' className='CoreCurrentLangService')
        (object variableName='sessionService' className='SessionService')
        (object variableName=(sumStrings (toCamelCase schema.moduleName) 'Service') className=(sumStrings (toPascalCase schema.moduleName) 'Service'))
~}}
{{/if}}
{{#or
    (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
}}
{{
    push injectionsArray
        (
            object
                variableName=(sumStrings (toCamelCase schema.moduleName) 'Service')
                className=(sumStrings (toPascalCase schema.moduleName) 'Service')
        )
~}}
{{/or ~}}
{{#unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0 }}
{{
    push injectionsArray
        (object variableName='gridFiltersStorageService' className='GridFiltersStorageService')
        (object variableName='gridStateService' className='GridStateService')
~}}
{{/unlessEq ~}}
{{{ variablesInjectorManager (object injections=injectionsArray) }}}

    {{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}
    // paginate to manage {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} grid-select-element
    const {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId = '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridList';
    gridStateService.setPaginationActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Pagination');
    gridStateService.setExportActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.export{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}');

    {{/each}}
    {{#and
        (eq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
        (eq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
        (eq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    }}{{#unless (hasI18nProperties schema.aggregateProperties) }}return {{else}}const action = {{/unless~}}
    {{/and}}actionService.action({
        id          : '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.detail.new',
        isViewAction: true,
    });
    {{#if (hasI18nProperties schema.aggregateProperties) }}

    // set current lang
    coreCurrentLangService.setCurrentLang(
        sessionService
            .get<CoreLang[]>('langs')
            .find((lang: CoreLang) => lang[sessionService.get('searchKeyLang')] === route.paramMap.get('langId')) ||
        sessionService.get<CoreLang>('fallbackLang'),
    );

    if (route.paramMap.get('id') && route.paramMap.get('langId'))
    {
        return {{ toCamelCase schema.moduleName }}Service
            {{#or
                (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
                (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
                (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
            }}
            .findByIdWithRelations({
            {{else}}
            .findById({
            {{/or}}
                id        : route.paramMap.get('id'),
                constraint: {
                    include: [{
                        association: '{{ toCamelCase schema.moduleName }}I18n',
                        required   : true,
                        where      : {
                            // retrieves object with the fallback lang to have
                            // a guide to the texts to be translated
                            langId: sessionService.get('fallbackLang').id,
                        },
                    }],
                },
                {{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}
                queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatementHandler
                    .init({ columnsConfig: {{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}ColumnsConfig })
                    .setColumFilters(gridFiltersStorageService.getColumnFilterState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                    .setSort(gridStateService.getSort({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                    .setPage(gridStateService.getPage({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                    .setSearch(gridStateService.getSearchState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                    .getQueryStatement(),
                {{/each}}
                headers: {
                    'Content-Language': route.paramMap.get('langId'),
                },
            });
    }
    {{/if}}
    {{#or
        (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
        (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
        (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    }}

    return {{ toCamelCase schema.moduleName }}Service.getRelations({{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}{
        queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatementHandler
            .init({ columnsConfig: {{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}ColumnsConfig })
            .setColumFilters(gridFiltersStorageService.getColumnFilterState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
            .setSort(gridStateService.getSort({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
            .setPage(gridStateService.getPage({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
            .setSearch(gridStateService.getSearchState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
            .getQueryStatement(),
    }{{/each}});
    {{else}}
    {{#if (hasI18nProperties schema.aggregateProperties) }}

    return action;
    {{/if}}
    {{/or}}
};

export const {{ toCamelCase schema.moduleName }}EditResolver: ResolveFn<{
{{
    setVar 'returnTypesArray' (
        array
            (object variableName='object' className=schema.aggregateName)
    )
~}}
{{#each (getWebComponentsProperties schema.aggregateProperties) }}
{{#eq webComponent.type 'select'}}
{{
    push ../returnTypesArray
        (
            object
                variableName=(sumStrings (toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) 'Get' (toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath)))
                className=(sumStrings (getAggregateNameFromPropertyRelationship relationship.modulePath) '[]')
        )
~}}
{{/eq ~}}
{{#eq webComponent.type 'grid-select-element'}}
{{
    push ../returnTypesArray
        (
            object
                variableName=(sumStrings (toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) 'Paginate' (toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath)))
                className=(sumStrings 'GridData<' (getAggregateNameFromPropertyRelationship relationship.modulePath) '>')
        )
~}}
{{/eq ~}}
{{#eq webComponent.type 'grid-elements-manager'}}
{{
    push ../returnTypesArray
        (
            object variableName=(sumStrings (toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) 'Paginate' (toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath)))
            className=(sumStrings 'GridData<' (getAggregateNameFromPropertyRelationship relationship.modulePath) '>')
        )
~}}
{{/eq ~}}
{{/each ~}}
{{{ returnTypeManager (object returnTypes=returnTypesArray) }}}
}> = (
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot,
) =>
{
{{
    setVar 'injectionsArray' (
        array
            (object variableName='actionService' className='ActionService')
            (object variableName=(sumStrings (toCamelCase schema.moduleName) 'Service') className=(sumStrings (toPascalCase schema.moduleName) 'Service'))
    )
~}}
{{#if (hasI18nProperties schema.aggregateProperties) }}
{{
    push injectionsArray
        (object variableName='coreCurrentLangService' className='CoreCurrentLangService')
        (object variableName='sessionService' className='SessionService')
~}}
{{/if}}
{{#unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0 }}
{{
    push injectionsArray
        (object variableName='gridFiltersStorageService' className='GridFiltersStorageService')
        (object variableName='gridStateService' className='GridStateService')
~}}
{{/unlessEq ~}}
{{#unlessEq (countGridElementsManagerWebComponentsProperties schema.aggregateProperties) 0 }}
{{
    push injectionsArray
        (object variableName='gridFiltersStorageService' className='GridFiltersStorageService')
        (object variableName='gridStateService' className='GridStateService')
~}}
{{/unlessEq ~}}
{{{ variablesInjectorManager (object injections=injectionsArray) }}}

    {{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}
    // paginate to manage {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} grid-select-element
    const {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId = '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridList';
    gridStateService.setPaginationActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Pagination');
    gridStateService.setExportActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.export{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}');

    {{/each}}
    {{#each (getGridElementsManagerWebComponentsProperties schema.aggregateProperties) }}
    // paginate to manage {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} grid-elements-manager
    const {{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId = '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridList';
    gridStateService.setPaginationActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Pagination');
    gridStateService.setExportActionId({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId, '{{ toCamelCase ../schema.boundedContextName }}::{{ toCamelCase ../schema.moduleName }}.detail.export{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}');

    {{/each}}
    actionService.action({
        id          : '{{ toCamelCase schema.boundedContextName }}::{{ toCamelCase schema.moduleName }}.detail.edit',
        isViewAction: true,
    });

    {{#if (hasI18nProperties schema.aggregateProperties) }}
    // set current lang
    coreCurrentLangService.setCurrentLang(
        sessionService
            .get<CoreLang[]>('langs')
            .find((lang: CoreLang) => lang[sessionService.get('searchKeyLang')] === route.paramMap.get('langId')),
    );

    {{/if}}
    {{#eq (countWebComponentsProperties schema.aggregateProperties) 0 }}
    return {{ toCamelCase schema.moduleName }}Service
        .findById({
            id: route.paramMap.get('id'),
            {{#if (hasI18nProperties schema.aggregateProperties) }}
            headers: {
                'Content-Language': route.paramMap.get('langId'),
            },
            {{/if}}
        });
    {{else}}
    return {{ toCamelCase schema.moduleName }}Service
        .findByIdWithRelations({
            id: route.paramMap.get('id'),
            {{#unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0 }}
            constraint: {
                include: [
                    {{#each (getMultipleSelectWebComponentsProperties schema.aggregateProperties) }}
                    {
                        association: '{{ name }}',
                        {{#if (hasI18nProperties (getPropertiesFromPropertyRelationship relationship.modulePath)) }}
                        include: [
                            {
                                association: '{{ relationship.singularName }}I18n',
                                required: true,
                                where: { langId: coreCurrentLangService.currentLang.id },
                            },
                        ],
                        {{/if}}
                    },
                    {{/each}}
                ],
            },
            {{/unlessEq}}
            {{#if (hasI18nProperties schema.aggregateProperties) }}
            headers: {
                'Content-Language': route.paramMap.get('langId'),
            },
            {{/if}}
            {{#each (getGridSelectElementWebComponentsProperties schema.aggregateProperties) }}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatementHandler
                .init({ columnsConfig: {{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}ColumnsConfig })
                .setColumFilters(gridFiltersStorageService.getColumnFilterState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setSort(gridStateService.getSort({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setPage(gridStateService.getPage({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setSearch(gridStateService.getSearchState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .getQueryStatement(),
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: { /**/ },
            {{/each}}
            {{#each (getGridElementsManagerWebComponentsProperties schema.aggregateProperties) }}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: QueryStatementHandler
                .init({ columnsConfig: {{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}ColumnsConfig })
                .setColumFilters(gridFiltersStorageService.getColumnFilterState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setSort(gridStateService.getSort({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setPage(gridStateService.getPage({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .setSearch(gridStateService.getSearchState({{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}GridId))
                .getQueryStatement(),
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {
                where: {
                    {{ getForeignKey (object relationship=relationship schema=../schema) }}: route.paramMap.get('id'),
                },
            },
            {{/each}}
        });
    {{/eq}}
};
