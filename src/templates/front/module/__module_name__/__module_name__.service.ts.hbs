{{
    setVar 'importsArray' (
        array
            (object items='Injectable' path='@angular/core')
            (object items=(array 'DocumentNode' 'FetchResult') path='@apollo/client/core')
            (object items=(array 'GraphQLHeaders' 'GraphQLService' 'GridData' 'parseGqlFields' 'QueryStatement') path='@aurora')
            (object items=(array 'BehaviorSubject' 'first' 'map' 'Observable' 'tap') path='rxjs')
            (
                object
                    items=
                    (
                        array
                            schema.aggregateName
                            (sumStrings (toPascalCase schema.boundedContextName) 'Create' (toPascalCase schema.moduleName))
                            (sumStrings (toPascalCase schema.boundedContextName) 'Update' (toPascalCase schema.moduleName) 'ById')
                            (sumStrings (toPascalCase schema.boundedContextName) 'Update' (toPascalCase schema.moduleNames))
                    )
                    path=(sumStrings config.appsContainer '/' toKebabCase schema.boundedContextName)
            )
            (
                object
                    items=
                    (
                        array
                            'createMutation'
                            'deleteByIdMutation'
                            'deleteMutation'
                            'fields'
                            'findByIdQuery'
                            'findQuery'
                            'getQuery'
                            'insertMutation'
                            'paginationQuery'
                            'updateByIdMutation'
                            'updateMutation'
                    )
                    path=(sumStrings config.appsContainer '/' toKebabCase schema.boundedContextName '/' toKebabCase schema.moduleName)
            )
    )
~}}
{{#unlessEq (countWebComponentsProperties schema.aggregateProperties) 0 }}
{{ push importsArray
    (object items=(array 'findByIdWithRelationsQuery') path=(sumStrings './' (toKebabCase schema.moduleName) '.graphql'))
~}}
{{/unlessEq}}
{{#or
    (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0)
    (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0)
}}
{{ push importsArray
    (object items=(array 'getRelations') path=(sumStrings './' (toKebabCase schema.moduleName) '.graphql'))
~}}
{{/or}}
{{#each schema.additionalApis}}
{{ push ../importsArray
    (object items=(sumStrings (getVariableNameAdditionalApi this) (toPascalCase ./resolverType)) path=(sumStrings './' (toKebabCase ../schema.moduleName) '.graphql'))
~}}
{{/each}}
{{#each (getWebComponentsProperties schema.aggregateProperties) }}
{{
    push ../importsArray
        (
            object
                items=(getAggregateNameFromPropertyRelationship relationship.modulePath)
                path=(sumStrings  ../config.appsContainer '/' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)))
        )
        (
            object
                items=(sumStrings (toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'Service')
                path=(sumStrings ../config.appsContainer '/' (toKebabCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath)) '/' (toKebabCase (getModuleNameFromPropertyRelationship relationship.modulePath)))
        )
~}}
{{/each}}
{{#each (getGridSelectMultipleElementsWebComponentsProperties schema.aggregateProperties) }}
{{
    push ../importsArray
        (
            object
                items=relationship.pivot.aggregateName
                path=(sumStrings ../config.appsContainer '/' toKebabCase relationship.pivot.boundedContextName)
        )
        (
            object
                items=(sumStrings (toPascalCase relationship.pivot.moduleName) 'Service')
                path=(sumStrings ../config.appsContainer '/' (toKebabCase relationship.pivot.boundedContextName) '/' (toKebabCase  relationship.pivot.moduleName))
        )
~}}
{{/each}}
{{{ importManager (object imports=importsArray) }}}
@Injectable({
    providedIn: 'root',
})
export class {{ toPascalCase schema.moduleName }}Service
{
    paginationSubject$: BehaviorSubject<GridData<{{ schema.aggregateName }}> | null> = new BehaviorSubject(null);
    {{ toCamelCase schema.moduleName }}Subject$: BehaviorSubject<{{ schema.aggregateName }} | null> = new BehaviorSubject(null);
    {{ toCamelCase schema.moduleNames }}Subject$: BehaviorSubject<{{ schema.aggregateName }}[] | null> = new BehaviorSubject(null);

    // scoped subjects
    paginationScoped: { [key: string]: BehaviorSubject<GridData<{{ schema.aggregateName }}> | null>; } = {};
    {{ toCamelCase schema.moduleName }}Scoped: { [key: string]: BehaviorSubject<{{ schema.aggregateName }} | null>; } = {};
    {{ toCamelCase schema.moduleNames }}Scoped: { [key: string]: BehaviorSubject<{{ schema.aggregateName }}[] | null>; } = {};

    constructor(
{{
    setVar 'injectionsArray' (
        array
            (object variableName='graphqlService' className='GraphQLService')
    )
~}}
{{#each (getWebComponentsProperties schema.aggregateProperties) }}
{{
    push ../injectionsArray
        (
            object variableName=(sumStrings (toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'Service')
            className=(sumStrings (toPascalCase (getModuleNameFromPropertyRelationship relationship.modulePath)) 'Service')
        )
~}}
{{/each}}
{{#each (getGridSelectMultipleElementsWebComponentsProperties schema.aggregateProperties) }}
{{
    push ../injectionsArray
        (
            object variableName=(sumStrings (toCamelCase relationship.pivot.moduleName) 'Service')
            className=(sumStrings (toPascalCase relationship.pivot.moduleName) 'Service')
        )
~}}
{{/each}}
{{{ constructorInjectorManager (object injections=injectionsArray) }}}
    ) {}

    /**
    * Getters
    */
    get pagination$(): Observable<GridData<{{ schema.aggregateName }}>>
    {
        return this.paginationSubject$.asObservable();
    }

    get {{ toCamelCase schema.moduleName }}$(): Observable<{{ schema.aggregateName }}>
    {
        return this.{{ toCamelCase schema.moduleName }}Subject$.asObservable();
    }

    get {{ toCamelCase schema.moduleNames }}$(): Observable<{{ schema.aggregateName }}[]>
    {
        return this.{{ toCamelCase schema.moduleNames }}Subject$.asObservable();
    }

    // allows to store different types of pagination under different scopes this allows us
    // to have multiple observables with different streams of pagination data.
    setScopePagination(scope: string, pagination: GridData<{{ schema.aggregateName }}>): void
    {
        if (this.paginationScoped[scope])
        {
            this.paginationScoped[scope].next(pagination);
            return;
        }
        // create new subject if not exist
        this.paginationScoped[scope] = new BehaviorSubject(pagination);
    }

    // get pagination observable by scope
    getScopePagination(scope: string): Observable<GridData<{{ schema.aggregateName }}>>
    {
        if (this.paginationScoped[scope]) return this.paginationScoped[scope].asObservable();
        return null;
    }

    setScope{{ toPascalCase schema.moduleName }}(scope: string, object: {{ schema.aggregateName }}): void
    {
        if (this.{{ toCamelCase schema.moduleName }}Scoped[scope])
        {
            this.{{ toCamelCase schema.moduleName }}Scoped[scope].next(object);
            return;
        }
        // create new subject if not exist
        this.{{ toCamelCase schema.moduleName }}Scoped[scope] = new BehaviorSubject(object);
    }

    getScope{{ toPascalCase schema.moduleName }}(scope: string): Observable<{{ schema.aggregateName }}>
    {
        if (this.{{ toCamelCase schema.moduleName }}Scoped[scope]) return this.{{ toCamelCase schema.moduleName }}Scoped[scope].asObservable();
        return null;
    }

    setScope{{ toPascalCase schema.moduleNames }}(scope: string, objects: {{ schema.aggregateName }}[]): void
    {
        if (this.{{ toCamelCase schema.moduleNames }}Scoped[scope])
        {
            this.{{ toCamelCase schema.moduleNames }}Scoped[scope].next(objects);
            return;
        }
        // create new subject if not exist
        this.{{ toCamelCase schema.moduleNames }}Scoped[scope] = new BehaviorSubject(objects);
    }

    getScope{{ toPascalCase schema.moduleNames }}(scope: string): Observable<{{ schema.aggregateName }}[]>
    {
        if (this.{{ toCamelCase schema.moduleNames }}Scoped[scope]) return this.{{ toCamelCase schema.moduleNames }}Scoped[scope].asObservable();
        return null;
    }

    pagination(
        {
            graphqlStatement = paginationQuery,
            query = {},
            constraint = {},
            headers = {},
            scope,
        }: {
            graphqlStatement?: DocumentNode;
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
            scope?: string;
        } = {},
    ): Observable<GridData<{{ schema.aggregateName }}>>
    {
        // get result, map ang throw data across observable
        return this.graphqlService
            .client()
            .watchQuery<{ pagination: GridData<{{ schema.aggregateName }}>; }>({
                query    : graphqlStatement,
                variables: {
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data.pagination),
                tap(pagination => scope ? this.setScopePagination(scope, pagination) : this.paginationSubject$.next(pagination)),
            );
    }

    findById(
        {
            graphqlStatement = findByIdQuery,
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            {{ toCamelCase name }} = null,
            {{/each}}
            constraint = {},
            headers = {},
            scope,
        }: {
            graphqlStatement?: DocumentNode;
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            {{ toCamelCase name }}?: string;
            {{/each}}
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
            scope?: string;
        } = {},
    ): Observable<{
        object: {{ schema.aggregateName }};
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                object: {{ schema.aggregateName }};
            }>({
                query    : parseGqlFields(graphqlStatement, fields, constraint),
                variables: {
                    {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
                    {{ toCamelCase name }},
                    {{/each}}
                    constraint,
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data => scope ? this.setScope{{ toPascalCase schema.moduleName }}(scope, data.object) : this.{{ toCamelCase schema.moduleName }}Subject$.next(data.object)),
            );
    }

    {{#unlessEq (countWebComponentsProperties schema.aggregateProperties) 0 }}
    findByIdWithRelations(
        {
            graphqlStatement = findByIdWithRelationsQuery,
            id = '',
            constraint = {},
            {{#each (getWebComponentsProperties schema.aggregateProperties) }}
            {{#eq webComponent.type 'select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'multiple-select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'grid-select-element'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'grid-elements-manager'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'grid-select-multiple-elements'}}
            queryPaginate{{ toPascalCase relationship.pivot.moduleNames }} = {},
            constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }} = {},
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            queryGet{{ toPascalCase relationship.pivot.moduleNames }} = {},
            constraintGet{{ toPascalCase relationship.pivot.moduleNames }} = {},
            {{/eq}}
            {{/each}}
            headers = {},
            scope,
        }: {
            graphqlStatement?: DocumentNode;
            id?: string;
            constraint?: QueryStatement;
            {{#each (getWebComponentsProperties schema.aggregateProperties) }}
            {{#eq webComponent.type 'select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'multiple-select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'grid-select-element'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'grid-elements-manager'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'grid-select-multiple-elements'}}
            queryPaginate{{ toPascalCase relationship.pivot.moduleNames }}?: QueryStatement;
            constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }}?: QueryStatement;
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            queryGet{{ toPascalCase relationship.pivot.moduleNames }}?: QueryStatement;
            constraintGet{{ toPascalCase relationship.pivot.moduleNames }}?: QueryStatement;
            {{/eq}}
            {{/each}}
            headers?: GraphQLHeaders;
            scope?: string;
        } = {},
    ): Observable<{
        object: {{ schema.aggregateName }};
        {{#each (getWebComponentsProperties schema.aggregateProperties) }}
        {{#eq webComponent.type 'select'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
        {{/eq}}
        {{#eq webComponent.type 'multiple-select'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
        {{/eq}}
        {{#eq webComponent.type 'grid-select-element'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
        {{/eq}}
        {{#eq webComponent.type 'grid-elements-manager'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
        {{/eq}}
        {{#eq webComponent.type 'grid-select-multiple-elements'}}
        {{ toCamelCase relationship.pivot.boundedContextName }}Paginate{{ toPascalCase relationship.pivot.moduleNames }}: GridData<{{ relationship.pivot.aggregateName }}>;
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ toPascalCase (getAggregateNameFromPropertyRelationship relationship.modulePath) }}>;
        {{ toCamelCase relationship.pivot.boundedContextName }}Get{{ toPascalCase relationship.pivot.moduleNames }}: {{ relationship.pivot.aggregateName }}[];
        {{/eq}}
        {{/each}}
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                object: {{ schema.aggregateName }};
                {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                {{#eq webComponent.type 'select'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
                {{/eq}}
                {{#eq webComponent.type 'multiple-select'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
                {{/eq}}
                {{#eq webComponent.type 'grid-select-element'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
                {{/eq}}
                {{#eq webComponent.type 'grid-elements-manager'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
                {{/eq}}
                {{#eq webComponent.type 'grid-select-multiple-elements'}}
                {{ toCamelCase relationship.pivot.boundedContextName }}Paginate{{ toPascalCase relationship.pivot.moduleNames }}: GridData<{{ relationship.pivot.aggregateName }}>;
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ toPascalCase (getAggregateNameFromPropertyRelationship relationship.modulePath) }}>;
                {{ toCamelCase relationship.pivot.boundedContextName }}Get{{ toPascalCase relationship.pivot.moduleNames }}: {{ relationship.pivot.aggregateName }}[];
                {{/eq}}
                {{/each}}
            }>({
                query    : parseGqlFields(graphqlStatement, fields, constraint),
                variables: {
                    id,
                    constraint,
                    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                    {{#eq webComponent.type 'select'}}
                    query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'multiple-select'}}
                    query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-element'}}
                    queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'grid-elements-manager'}}
                    queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-multiple-elements'}}
                    queryPaginate{{ toPascalCase relationship.pivot.moduleNames }},
                    constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }}: {
                        ...constraintPaginate{{ toPascalCase relationship.pivot.moduleNames }},
                        where: {
                            {{ toCamelCase ../schema.moduleName }}Id: id,
                        },
                        include: [
                            {
                                association: '{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}',
                            },
                        ],
                    },
                    queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    queryGet{{ toPascalCase relationship.pivot.moduleNames }},
                    constraintGet{{ toPascalCase relationship.pivot.moduleNames }},
                    {{/eq}}
                    {{/each}}
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data =>
                {
                    if (scope)
                    {
                        this.setScope{{ toPascalCase schema.moduleName }}(scope, data.object);
                    }
                    else
                    {
                        this.{{ toCamelCase schema.moduleName }}Subject$.next(data.object);
                    }
                    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                    {{#eq webComponent.type 'select'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Subject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'multiple-select'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Subject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-element'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.paginationSubject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'grid-elements-manager'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.paginationSubject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-multiple-elements'}}
                    this.{{ toCamelCase relationship.pivot.moduleName }}Service.paginationSubject$.next(data.{{ toCamelCase relationship.pivot.boundedContextName }}Paginate{{ toPascalCase relationship.pivot.moduleNames }});
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.paginationSubject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    this.{{ toCamelCase relationship.pivot.moduleName }}Service.{{ toCamelCase relationship.pivot.moduleNames }}Subject$.next(data.{{ toCamelCase relationship.pivot.boundedContextName }}Get{{ toPascalCase relationship.pivot.moduleNames }});
                    {{/eq}}
                    {{/each}}
                }),
            );
    }

    {{/unlessEq}}
    find(
        {
            graphqlStatement = findQuery,
            query = {},
            constraint = {},
            headers = {},
            scope,
        }: {
            graphqlStatement?: DocumentNode;
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
            scope?: string;
        } = {},
    ): Observable<{
        object: {{ schema.aggregateName }};
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                object: {{ schema.aggregateName }};
            }>({
                query    : parseGqlFields(graphqlStatement, fields, query, constraint),
                variables: {
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data => scope ? this.setScope{{ toPascalCase schema.moduleName }}(scope, data.object) : this.{{ toCamelCase schema.moduleName }}Subject$.next(data.object)),
            );
    }

    get(
        {
            graphqlStatement = getQuery,
            query = {},
            constraint = {},
            headers = {},
            scope,
        }: {
            graphqlStatement?: DocumentNode;
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
            scope?: string;
        } = {},
    ): Observable<{
        objects: {{ schema.aggregateName }}[];
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                objects: {{ schema.aggregateName }}[];
            }>({
                query    : parseGqlFields(graphqlStatement, fields, query, constraint),
                variables: {
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data => scope ? this.setScope{{ toPascalCase schema.moduleNames }}(scope, data.objects) : this.{{ toCamelCase schema.moduleNames }}Subject$.next(data.objects)),
            );
    }

    {{#or
        (unlessEq (countGridSelectElementWebComponentsProperties schema.aggregateProperties) 0)
        (unlessEq (countSelectElementWebComponentsProperties schema.aggregateProperties) 0) 
        (unlessEq (countMultipleSelectElementWebComponentsProperties schema.aggregateProperties) 0) 
    }}
    getRelations(
        {
            {{#each (getWebComponentsProperties schema.aggregateProperties) }}
            {{#eq webComponent.type 'select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'multiple-select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{#eq webComponent.type 'grid-select-element'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }} = {},
            {{/eq}}
            {{/each}}
            headers = {},
        }: {
            {{#each (getWebComponentsProperties schema.aggregateProperties) }}
            {{#eq webComponent.type 'select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'multiple-select'}}
            query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{#eq webComponent.type 'grid-select-element'}}
            queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}?: QueryStatement;
            {{/eq}}
            {{/each}}
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<{
        {{#each (getWebComponentsProperties schema.aggregateProperties) }}
        {{#eq webComponent.type 'select'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
        {{/eq}}
        {{#eq webComponent.type 'multiple-select'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
        {{/eq}}
        {{#eq webComponent.type 'grid-select-element'}}
        {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
        {{/eq}}
        {{/each}}
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                {{#eq webComponent.type 'select'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
                {{/eq}}
                {{#eq webComponent.type 'multiple-select'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: {{ getAggregateNameFromPropertyRelationship relationship.modulePath }}[];
                {{/eq}}
                {{#eq webComponent.type 'grid-select-element'}}
                {{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}: GridData<{{ getAggregateNameFromPropertyRelationship relationship.modulePath }}>;
                {{/eq}}
                {{/each}}
            }>({
                query    : getRelations,
                variables: {
                    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                    {{#eq webComponent.type 'select'}}
                    query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'multiple-select'}}
                    query{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraint{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-element'}}
                    queryPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    constraintPaginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }},
                    {{/eq}}
                    {{/each}}
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data =>
                {
                    {{#each (getWebComponentsProperties schema.aggregateProperties) }}
                    {{#eq webComponent.type 'select'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Subject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'multiple-select'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.{{ toCamelCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }}Subject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Get{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{#eq webComponent.type 'grid-select-element'}}
                    this.{{ toCamelCase (getModuleNameFromPropertyRelationship relationship.modulePath) }}Service.paginationSubject$.next(data.{{ toCamelCase (getBoundedContextNameFromPropertyRelationship relationship.modulePath) }}Paginate{{ toPascalCase (getModuleNamesFromPropertyRelationship relationship.modulePath) }});
                    {{/eq}}
                    {{/each}}
                }),
            );
    }

    {{/or}}
    create<T>(
        {
            graphqlStatement = createMutation,
            object = null,
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            object?: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }};
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    payload: object,
                },
                context: {
                    headers,
                },
            });
    }

    insert<T>(
        {
            graphqlStatement = insertMutation,
            objects = null,
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            objects?: {{ toPascalCase schema.boundedContextName }}Create{{ toPascalCase schema.moduleName }}[];
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    payload: objects,
                },
                context: {
                    headers,
                },
            });
    }

    updateById<T>(
        {
            graphqlStatement = updateByIdMutation,
            object = null,
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            object?: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleName }}ById;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    payload: object,
                },
                context: {
                    headers,
                },
            });
    }

    update<T>(
        {
            graphqlStatement = updateMutation,
            object = null,
            query = {},
            constraint = {},
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            object?: {{ toPascalCase schema.boundedContextName }}Update{{ toPascalCase schema.moduleNames }};
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    payload: object,
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            });
    }

    deleteById<T>(
        {
            graphqlStatement = deleteByIdMutation,
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            {{ toCamelCase name }} = null,
            {{/each}}
            constraint = {},
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
            {{ toCamelCase name }}?: string;
            {{/each}}
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    {{#each (getPrimaryKeyProperties schema.aggregateProperties) }}
                    {{ toCamelCase name }},
                    {{/each}}
                    constraint,
                },
                context: {
                    headers,
                },
            });
    }

    delete<T>(
        {
            graphqlStatement = deleteMutation,
            query = {},
            constraint = {},
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            });
    }
{{#if (hasAdditionalApiQueries schema.additionalApis) }}
{{#each (getAdditionalApiQueries schema.additionalApis) }}

{{#if @first}}
    // Queries additionalApis
{{/if}}
    {{ getVariableNameAdditionalApi this }}(
        {
            graphqlStatement = {{ getVariableNameAdditionalApi this }}Query,
            query = {},
            constraint = {},
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            query?: QueryStatement;
            constraint?: QueryStatement;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<{
        objects: {{ ../schema.aggregateName }}[];
    }>
    {
        return this.graphqlService
            .client()
            .watchQuery<{
                objects: {{ ../schema.aggregateName }};
            }>({
                query    : graphqlStatement,
                variables: {
                    query,
                    constraint,
                },
                context: {
                    headers,
                },
            })
            .valueChanges
            .pipe(
                first(),
                map(result => result.data),
                tap(data =>
                {
                    this.{{ toCamelCase ../schema.moduleNames }}Subject$.next(data.objects);
                }),
            );
    }
{{/each}}
{{/if}}
{{#if (hasAdditionalApiMutations schema.additionalApis) }}
{{#each (getAdditionalApiMutations schema.additionalApis) }}

{{#if @first}}
    // Mutation additionalApis
{{/if}}
    {{ getVariableNameAdditionalApi this }}<T>(
        {
            graphqlStatement = {{ getVariableNameAdditionalApi this }}Mutation,
            object = null,
            headers = {},
        }: {
            graphqlStatement?: DocumentNode;
            object?: {{ toPascalCase ../schema.boundedContextName }}Update{{ toPascalCase ../schema.moduleName }}ById;
            headers?: GraphQLHeaders;
        } = {},
    ): Observable<FetchResult<T>>
    {
        return this.graphqlService
            .client()
            .mutate({
                mutation : graphqlStatement,
                variables: {
                    payload: object,
                },
                context: {
                    headers,
                },
            });
    }
{{/each}}
{{/if}}
}
