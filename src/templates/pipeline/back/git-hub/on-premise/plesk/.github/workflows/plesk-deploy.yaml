name: Testing, Build and Deploy Back on Plesk

on:
  push:
    branches:
      - 'environments/plesk-production'

env:
  # https://www.plesk.com/kb/support/how-to-set-up-ssh-keys-for-plesk-server/
  # don't forget set like bin/bash ftp user
  # SSH private key
  SERVER_KEY: $\{{ secrets.SERVER_KEY }}
  # security phrase for SSH private key
  SERVER_KEY_PHRASE: $\{{ secrets.SERVER_KEY_PHRASE }}
  # default port SFTP 22
  SERVER_PORT: $\{{ secrets.SERVER_PORT }}
  SERVER_HOST: $\{{ secrets.SERVER_HOST }}
  # SFTP/SSH username
  SERVER_USERNAME: $\{{ secrets.SERVER_USERNAME }}
  # example /var/www/vhosts/contoso.com
  SERVER_PATH: $\{{ secrets.SERVER_PATH }}

  # application secrets
  OAUTH_PRIVATE_KEY: $\{{ secrets.OAUTH_PRIVATE_KEY }}
  OAUTH_PUBLIC_KEY: $\{{ secrets.OAUTH_PUBLIC_KEY }}
  DOT_ENV: $\{{ secrets.DOT_ENV }}

jobs:
  tests:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    - name: Create OAuth Keys and dot file
      run: |
        touch oauth-private.key
        echo "$OAUTH_PRIVATE_KEY" > oauth-private.key
        touch oauth-public.key
        echo "$OAUTH_PUBLIC_KEY" > oauth-public.key
        touch .env
        echo "$DOT_ENV" > .env
      shell: bash

    - name: Unit testing
      run: npm run test

    - name: Acceptance testing
      run: npm run test:e2e

    - name: Build project
      run: npm run build

    - name: Copy graphQL files
      run: |
        mkdir ./dist/src/graphql \;
        find ./src -name '*.graphql' -exec cp "{}" ./dist/src/graphql \;
      shell: bash

    - name: Zip artifact for deployment
      run: zip release.zip ./dist/* ./package.json ./package-lock.json -r

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: tested-artifact
        path: |
          release.zip

  deploy:
    name: Rsync Plesk deploy
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: tested-artifact

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: tested-artifact

      - name: Unzip artifact for deployment
        run: unzip -o release.zip -d src

      - name: Delete zip artifact
        run: rm release.zip

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --prefix src

      - name: Create OAuth Keys and dot file
        run: |
          touch src/oauth-private.key
          echo "$OAUTH_PRIVATE_KEY" > src/oauth-private.key
          touch src/oauth-public.key
          echo "$OAUTH_PUBLIC_KEY" > src/oauth-public.key
          touch src/.env
          echo "$DOT_ENV" > src/.env
        shell: bash

      - name: Create file to restart application
        run: |
          mkdir src/tmp
          touch src/tmp/restart.txt
        shell: bash

      - name: Deploy Plesk with rsync
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzh --delete --include=".env" --exclude=".*"
          path: src/
          remote_path: $\{{ env.SERVER_PATH }}/httpdocs
          remote_host: $\{{ env.SERVER_HOST }}
          remote_port: $\{{ env.SERVER_PORT }}
          remote_user: $\{{ env.SERVER_USERNAME }}
          remote_key: $\{{ env.SERVER_KEY }}
          remote_key_pass: $\{{ env.SERVER_KEY_PHRASE }}

      - name: Print server path
        run: |
          echo $\{{ env.SERVER_PATH }}
        shell: sh

      - name: Execute command on remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: $\{{ env.SERVER_HOST }}
          username: $\{{ env.SERVER_USERNAME }}
          key: $\{{ env.SERVER_KEY }}
          passphrase: $\{{ env.SERVER_KEY_PHRASE }}
          port: $\{{ env.SERVER_PORT }}
          script: |
            whoami
            ls -al
            mkdir -p $\{{ env.SERVER_PATH }}/storage/app/public
            ln -s $\{{ env.SERVER_PATH }}/storage/app/public $\{{ env.SERVER_PATH }}/httpdocs/public