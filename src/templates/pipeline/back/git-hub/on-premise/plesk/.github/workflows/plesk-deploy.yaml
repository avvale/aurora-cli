name: Testing, Build and Deploy Back on Plesk

on:
  push:
    branches:
      - 'environments/plesk-dev'

  workflow_dispatch:

env:
  # https://www.plesk.com/kb/support/how-to-set-up-ssh-keys-for-plesk-server/
  # don't forget set like bin/bash ftp user
  # SSH private key
  SERVER_KEY: $\{{ secrets.PLESK_DEV_SERVER_KEY }}
  # security phrase for SSH private key
  SERVER_KEY_PHRASE: $\{{ secrets.PLESK_DEV_SERVER_KEY_PHRASE }}
  # default port SFTP 22
  SERVER_PORT: $\{{ vars.PLESK_DEV_SERVER_PORT }}
  SERVER_HOST: $\{{ vars.PLESK_DEV_SERVER_HOST }}
  # SFTP/SSH username
  SERVER_USERNAME: $\{{ secrets.PLESK_DEV_SERVER_USERNAME }}
  # example /var/www/vhosts/contoso.com
  SERVER_PATH: $\{{ vars.PLESK_DEV_SERVER_PATH }}

  # application secrets
  OAUTH_PRIVATE_KEY: $\{{ secrets.PLESK_DEV_OAUTH_PRIVATE_KEY }}
  OAUTH_PUBLIC_KEY: $\{{ secrets.PLESK_DEV_OAUTH_PUBLIC_KEY }}
  SOPS_DOT_ENV_ENC: $\{{ vars.PLESK_DEV_DOT_ENV_ENC }}
  SOPS_AGE_KEY: $\{{ secrets.PLESK_DEV_SOPS_AGE_KEY }}

  # Node version
  NODE_VERSION: '22'

jobs:
  deploy-artifact:
    name: Build and test and deploy
    runs-on: ubuntu-latest

    outputs:
      DOT_ENV_B64: ${{ steps.decrypt-env.outputs.dot_env_b64 }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '$\{{ env.NODE_VERSION }}'

    - name: Install dependencies
      run: npm ci

    - name: Create OAuth Keys and dot file
      run: |
        touch oauth-private.key
        echo "$OAUTH_PRIVATE_KEY" > oauth-private.key
        touch oauth-public.key
        echo "$OAUTH_PUBLIC_KEY" > oauth-public.key
      shell: bash

    - name: Setup SOPS
      uses: nhedger/setup-sops@v2

    - name: Install age
      run: |
        sudo apt-get update
        sudo apt-get install -y age

    - name: Decrypt env to do testing
      run: |
        SOPS_AGE_KEY="$SOPS_AGE_KEY" sops --decrypt --input-type binary --output-type binary $SOPS_DOT_ENV_ENC > .env

    - name: Unit testing
      run: npm run test

    - name: Acceptance testing
      run: npm run test:e2e

    - name: Build project
      run: npm run build

    - name: Copy graphQL files
      run: |
        mkdir ./dist/src/graphql \;
        find ./src -name '*.graphql' -exec cp "{}" ./dist/src/graphql \;
      shell: bash

    - name: Zip artifact for deployment
      run: zip artifact.zip ./dist/* ./package.json ./package-lock.json -r

    - name: Unzip artifact for deployment
      run: unzip -o artifact.zip -d deployment

    - name: Output decrypted env for next job
      id: decrypt-env
      run: |
        dot_env_b64=$(SOPS_AGE_KEY="$SOPS_AGE_KEY" sops --decrypt --input-type binary --output-type binary "$SOPS_DOT_ENV_ENC" | base64 -w0)
        printf 'dot_env_b64<<EOF\n%s\nEOF\n' "$dot_env_b64" >> "$GITHUB_OUTPUT"

    - name: Unzip artifact for deployment
      run: unzip -o artifact.zip -d deployment

    - name: Delete zip artifact
      run: rm artifact.zip

    - name: Create file to restart application
      run: |
        mkdir deployment/tmp
        touch deployment/tmp/restart.txt
      shell: bash

    - name: Deploy Plesk with rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzh --delete --exclude=".*"
        path: deployment/
        remote_path: $\{{ env.SERVER_PATH }}/httpdocs
        remote_host: $\{{ env.SERVER_HOST }}
        remote_port: $\{{ env.SERVER_PORT }}
        remote_user: $\{{ env.SERVER_USERNAME }}
        remote_key: $\{{ env.SERVER_KEY }}
        remote_key_pass: $\{{ env.SERVER_KEY_PHRASE }}

    - name: Execute command on remote server
      uses: appleboy/ssh-action@v1
      env:
        DOT_ENV_B64: $\{{ needs.tests.outputs.DOT_ENV_B64 }}
      with:
        host: $\{{ env.SERVER_HOST }}
        username: $\{{ env.SERVER_USERNAME }}
        key: $\{{ env.SERVER_KEY }}
        passphrase: $\{{ env.SERVER_KEY_PHRASE }}
        port: $\{{ env.SERVER_PORT }}
        envs: DOT_ENV_B64, NODE_VERSION, OAUTH_PRIVATE_KEY, OAUTH_PUBLIC_KEY
        script: |
          PATH=$PATH:$\{{ env.SERVER_PATH }}/.nodenv/shims
          whoami
          ls -al
          touch $\{{ env.SERVER_PATH }}/.node-version
          echo "$NODE_VERSION" > $\{{ env.SERVER_PATH }}/.node-version
          mkdir -p $\{{ env.SERVER_PATH }}/storage/app/public
          ln -s $\{{ env.SERVER_PATH }}/storage/app/public $\{{ env.SERVER_PATH }}/httpdocs/public
          touch $\{{ env.SERVER_PATH }}/oauth-private.key
          echo "$OAUTH_PRIVATE_KEY" > $\{{ env.SERVER_PATH }}/oauth-private.key
          touch $\{{ env.SERVER_PATH }}/oauth-public.key
          echo "$OAUTH_PUBLIC_KEY" > $\{{ env.SERVER_PATH }}/oauth-public.key
          touch $\{{ env.SERVER_PATH }}/.env
          echo "$DOT_ENV_B64" | base64 -d > $\{{ env.SERVER_PATH }}/.env
          cd httpdocs && npm ci